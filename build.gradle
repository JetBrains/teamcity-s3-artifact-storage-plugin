import java.nio.file.Paths

ext {
  versionNumber = project.hasProperty('versionNumber') ? property('versionNumber') : 'SNAPSHOT-' + new Date().format('yyyyMMddHHmmss')
  projectIds = ['group': 'teamcity-s3-storage', 'version': versionNumber, 'artifact': 's3-artifact-storage']
  teamcityVersion = project.hasProperty('teamcityVersion') ? property('teamcityVersion') : '2024.07-SNAPSHOT'
  awsCoreVersion = findProperty('awsCoreVersion') ?: teamcityVersion ?: 'SNAPSHOT'
  teamcityS3SDKVersion = project.hasProperty('teamcityS3SDKVersion') ? property('teamcityS3SDKVersion') : teamcityVersion
  migrationToolVersion = project.hasProperty('migrationToolVersion') ? property('migrationToolVersion') : '2024.03.tcbuildtag'
  shouldIncludeMigrationTool = project.hasProperty('shouldIncludeMigrationTool') ? property('shouldIncludeMigrationTool') : false
  spaceUsername = findProperty("space.repository.user") ?: findProperty("spaceUsername")
  spacePassword = findProperty("space.repository.password") ?: findProperty("spacePassword")
  localRepo = anyParamPath('TC_LOCAL_REPO')
  localAwsRepo = anyParamPath('TC_AWS_LOCAL_REPO')
}

group = projectIds.group
version = projectIds.version

allprojects {
  group = projectIds.group
  version = projectIds.version

  project.repositories.clear()

  repositories {
    if (localRepo) {
      maven {
        name = "local-teamcity-artifacts"
        url "file:///${localRepo}"
      }
    }
    if (localAwsRepo) {
      maven {
        name = "local-aws-teamcity-artifacts"
        url "file:///${localAwsRepo}"
      }
    }
    maven { url "https://repo.labs.intellij.net/teamcity" }
    maven { url "https://download.jetbrains.com/teamcity-repository" }
    maven { url "https://repo.labs.intellij.net/teamcity" }
    maven {
      url "https://packages.jetbrains.team/maven/p/tc/maven"
      credentials {
        username = spaceUsername as String
        password = spacePassword as String
      }
    }
    mavenLocal()
    mavenCentral()
  }
}


subprojects {
  apply plugin: "java"
  apply plugin: 'java-library'

  test.useTestNG()
  jar.version = null

  dependencies{
    api("org.jetbrains.teamcity.plugins:aws-core-common:$awsCoreVersion") {
      changing = true
      exclude group: 'com.fasterxml.jackson.core'
      exclude group: 'com.fasterxml.jackson.dataformat'
      exclude group: 'org.apache.httpcomponents'
      exclude group: 'org.jetbrains.teamcity'
    }
  }

  tasks.withType(JavaCompile) {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"

    if (project.hasProperty('JDK_18')) {
      options.bootstrapClasspath = layout.files("$JDK_18/jre/lib/rt.jar")
    }
  }
}

def anyParamPath(String... names) {
  def param = anyParam(names);
  if (param == null || param.isEmpty())
    return null
  return (Paths.get(param).isAbsolute()) ?
         Paths.get(param) : getRootDir().toPath().resolve(param)
}

def anyParam(String... names) {
  def param
  try {
    param = names.findResult {
      project.hasProperty(it) ? project.getProperty(it) : System.getProperty(it) ?: System.getenv(it) ?: null
    }
    if (param == null || param.isEmpty())
      param = null
  } finally {
    println("AnyParam: $names -> $param")
  }
  return param
}
