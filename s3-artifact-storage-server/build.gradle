plugins {
    id 'io.github.rodm.teamcity-server' version "1.5.2"
    id 'com.github.jk1.tcdeps' version '1.3.1'
}

teamcity {
    version = teamcityVersion
    allowSnapshotVersions = true
    server {
        descriptor = project.file('teamcity-plugin.xml')
        tokens = [Version: project.version]

        files {
          into("kotlin-dsl") {
            from("kotlin-dsl")
          }
        }
    }
}

if(shouldIncludeMigrationTool) {
    repositories {
        teamcityServer {
            url = "https://buildserver.labs.intellij.net/"
            credentials {
                username = teamcity_username
                password = (project.hasProperty("teamcity_password") ? teamcity_password : teamcity_token)
            }
        }
    }
}

configurations {
  artifactMigrationTool
  configureEach {
    exclude(group: 'org.jetbrains.teamcity', module: 'server-web-api')
  }
}

dependencies {
    implementation project(':s3-artifact-storage-common')
    provided(group: 'org.jetbrains.teamcity.internal', name: 'server', version: "${teamcityVersion}") {
      exclude group: 'org.apache.httpcomponents', module: 'httpclient'
      exclude group: 'org.apache.httpcomponents', module: 'httpcore'
      exclude group: 'commons-codec', module: 'commons-codec'
    }
    provided "org.jetbrains.teamcity:connections-api:${teamcityVersion}"

    implementation "org.bouncycastle:bcprov-jdk18on:1.76"

    // TW-84426
    provided "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

    testImplementation "org.testcontainers:localstack:1.15.2"

    agent project(path: ':s3-artifact-storage-agent', configuration: 'plugin')
    server group: 'commons-codec', name: 'commons-codec', version: "1.11"

    if(shouldIncludeMigrationTool){
        artifactMigrationTool tc(buildTypeId: 'TC_TeamCityTools_TeamCityArtifactsMigrationTool', version: migrationToolVersion, artifactPath: "teamcity-artifacts-migration-tool.zip")
    }
}

serverPlugin.version = null
serverPlugin.baseName = projectIds.artifact

task prepareArtifactMigrationTool(type: Sync) {
    from { configurations.artifactMigrationTool.singleFile }
    into "build/resources/main/buildServerResources/migration-tool/"
    rename { "artifacts-migration-tool.zip" }
}

if(shouldIncludeMigrationTool){
    processResources.finalizedBy(prepareArtifactMigrationTool)
}
