<?xml version="1.0" encoding="UTF-8"?>
<dsl-extension
    kind="projectFeature"
    type="storage_settings"
    generateDslJar="true"
    applicable="params['storage.type'] == 'S3_storage'">
  <class name="S3Storage">
    <description>
      Amazon S3 Artifact Storage
    </description>
  </class>

  <init>
    <param name="storage.type" value="S3_storage"/>
    <param name="storage.s3.bucket.name.wasProvidedAsString" dslName="nameAsString" type="boolean" value="true"/>
  </init>

  <function name="s3Storage">
    <description>
      Adds a Amazon S3 Artifact Storage project feature
      @see S3Storage
    </description>
  </function>

  <params>
    <param name="storage.s3.accelerateModeEnabled" dslName="enableTransferAcceleration" type="boolean">
      <description>
        Whether to enable Transfer Acceleration
      </description>
    </param>
    <param name="storage.s3.cloudfront.enabled" dslName="cloudFrontEnabled" type="boolean" trueValue="true" falseValue="">
      <description>
        Whether to use CloudFront for artifact transport
      </description>
    </param>
    <param name="storage.s3.cloudfront.upload.distribution" dslName="cloudFrontUploadDistribution" type="string">
      <description>
        Name of CloudFront distribution for uploads
      </description>
    </param>
    <param name="storage.s3.cloudfront.download.distribution" dslName="cloudFrontDownloadDistribution" type="string">
      <description>
        Name of CloudFront distribution for downloads
      </description>
    </param>
    <param name="storage.s3.cloudfront.publicKeyId" dslName="cloudFrontPublicKeyId" type="string">
      <description>
        Id of Public Key in CloudFront that has access to selected distribution
      </description>
    </param>
    <param name="secure:storage.s3.cloudfront.privateKey" dslName="cloudFrontPrivateKey">
      <description>
        Private key that corresponds to chosen public key
      </description>
    </param>

    <param name="awsConnectionId" dslName="awsConnectionId">
      <description>
        The ID of configured AWS Connection to access the AWS S3. @see AwsConnection
      </description>
    </param>
  </params>

  <examples>

    <example>
      <description>
        Adds new storage that allows TeamCity to store build artifacts in S3
      </description>
      <code>
        s3Storage {
          id = "S3_STORAGE_ID"
          storageName = "Storage Name"

          bucketName = "Bucket Name"
          bucketPrefix = "path prefix inside the bucket"

          forceVirtualHostAddressing = true
          enableTransferAcceleration = false
          multipartThreshold = "8MB"
          multipartChunksize = "8MB"

          // Storage requires configured AwsEnvironment
          awsEnvironment = default {
            awsRegionName = "AWS region"
          }

          // Storage also requires configured Credentials
          accessKeyID = "AWS Access key ID"
          accessKey = "Link to credentialsJSON property containing AWS access key"
        }
      </code>
    </example>

    <example>
      <description>
        Adds new storage that allows TeamCity to store build artifacts in S3 and upload/download them using CloudFront
      </description>
      <code>
        s3Storage {
          id = "S3_STORAGE_ID"
          storageName = "Storage Name"
          bucketName = "Bucket Name"
          bucketPrefix = "path prefix inside the bucket"
          forceVirtualHostAddressing = true
          multipartThreshold = "6MB"
          multipartChunksize = "8MB"

          //CloudFront configuration
          cloudFrontEnabled = true
          cloudFrontUploadDistribution = "ID of CloudFront Distribution used for uploads"
          cloudFrontDownloadDistribution = "ID of CloudFront Distribution used for downloads"
          cloudFrontPublicKeyId = "ID of CloudFront public key"
          cloudFrontPrivateKey = "Link to credentialsJSON property containing CloudFront private key"

          // Storage requires configured AwsEnvironment
          awsEnvironment = default {
            awsRegionName = "AWS region"
          }

          // Storage also requires configured Credentials
          accessKeyID = "AWS Access key ID"
          accessKey = "Link to credentialsJSON property containing AWS access key"
        }
      </code>
    </example>

    <example>
      <description>
        AWSEnvironment. Selects default environment with specific AWS region
      </description>
      <code>
        awsEnvironment = default {
          awsRegionName = "AWS region"
        }
      </code>
    </example>

    <example>
      <description>
        AWSEnvironment. Selects custom environment with specific region
      </description>
      <code>
        awsEnvironment = custom {
          endpoint = "URL of custom endpoint"
          awsRegionName = "region"
        }
      </code>
    </example>
    <example>
      <description>
        Credentials. Specifies credentials using access key
      </description>
      <code>
        accessKeyID = "AWS Access key ID"
        accessKey = "Link to credentialsJSON property containing AWS access key"
      </code>
    </example>
    <example>
      <description>
        Credentials. Specifies credentials using default provider chain
      </description>
      <code>
        useDefaultCredentialProviderChain = true
      </code>
    </example>
  </examples>
</dsl-extension>
